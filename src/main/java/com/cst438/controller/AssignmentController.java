package com.cst438.controller;

import com.cst438.domain.*;
import com.cst438.dto.AssignmentDTO;
import com.cst438.dto.AssignmentStudentDTO;
import com.cst438.dto.GradeDTO;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.server.ResponseStatusException;


import java.util.ArrayList;
import java.util.List;

@RestController
@CrossOrigin(origins = "http://localhost:3000")
public class AssignmentController {

    @Autowired
    AssignmentRepository assignmentRepository;
    @Autowired
    UserRepository userRepository;
    @Autowired
    SectionRepository sectionRepository;
    @Autowired
    CourseRepository courseRepository;
    @Autowired
    GradeRepository gradeRepository;
    @Autowired
    EnrollmentRepository enrollmentRepository;


    // instructor lists assignments for a section.  Assignments ordered by due date.
    // logged in user must be the instructor for the section

    @GetMapping("/sections/{secNo}/assignments")
    public List<AssignmentDTO> getAssignments(
            @PathVariable("secNo") int secNo) {

        List<Assignment> assignments = assignmentRepository.findBySectionNoOrderByDueDate(secNo);
        List<AssignmentDTO> dto_list = new ArrayList<>();


        if (assignments.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "No assignments found for section: " + secNo);
        }


        for (Assignment a : assignments) {
            dto_list.add(new AssignmentDTO(a.getAssignmentId(), a.getTitle(), a.getDueDate(),
                    a.getSection().getCourse().getCourseId(), a.getSection().getSecId(),
                    a.getSection().getSectionNo()));
        }


        return dto_list;
    }

    // add assignment
    // user must be instructor of the section
    // return AssignmentDTO with assignmentID generated by database
    @PostMapping("/assignments")
    public AssignmentDTO createAssignment(
            @RequestBody AssignmentDTO dto) {
        Section section = sectionRepository.findById(dto.secNo()).orElse(null);

        if (section == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "section not found: " + dto.secId());
        }
        Assignment assignment = new Assignment();

        assignment.setAssignmentId(dto.id());
        assignment.setSection(section);
        assignment.setTitle(dto.title());
        assignment.setDueDate(dto.dueDate());

        assignmentRepository.save(assignment);

        return new AssignmentDTO(assignment.getAssignmentId(), assignment.getTitle(), assignment.getDueDate(),
                assignment.getSection().getCourse().getCourseId(), assignment.getSection().getSecId(),
                assignment.getSection().getSectionNo());
    }

    // update assignment for a section.  Only title and dueDate may be changed.
    // user must be instructor of the section
    // return updated AssignmentDTO
    @PutMapping("/assignments")
    public AssignmentDTO updateAssignment(@RequestBody AssignmentDTO dto) {
        Assignment assignment = assignmentRepository.findById(dto.id()).orElse(null);
        if (assignment == null){
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Assignment not found: " + dto.id());
        } else {
            assignment.setTitle(dto.title());
            assignment.setDueDate(dto.dueDate());
            assignmentRepository.save(assignment);
        }
        return new AssignmentDTO(assignment.getAssignmentId(), assignment.getTitle(), assignment.getDueDate(),
                assignment.getSection().getCourse().getCourseId(), assignment.getSection().getSecId(),
                assignment.getSection().getSectionNo());
    }

    // delete assignment for a section
    // logged in user must be instructor of the section
    @DeleteMapping("/assignments/{assignmentId}")
    public void deleteAssignment(@PathVariable("assignmentId") int assignmentId) {

        Assignment assignment = assignmentRepository.findById(assignmentId).orElse(null);
        List<Grade> grades = assignment.getGrades();

        if (assignment == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Assignment not found: " + assignmentId);
        } else {
            if (grades != null){
                for (Grade grade : grades){
                    int tempId = grade.getGradeId();
                    Grade tempGrade = gradeRepository.findById(tempId).orElse(null);
                    if (tempGrade != null){
                        gradeRepository.delete(tempGrade);
                    }
                }
            }
            
            assignmentRepository.delete(assignment);
        }
    }

    // instructor gets grades for assignment ordered by student name
    // user must be instructor for the section
    @GetMapping("/assignments/{assignmentId}/grades")
    public List<GradeDTO> getAssignmentGrades(@PathVariable("assignmentId") int assignmentId) {

        List<GradeDTO> dto_list = new ArrayList<>();
        Assignment assignment = assignmentRepository.findById(assignmentId).orElse(null);

        if (assignment == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Assignment Not found: " + assignmentId);
        }

        List<Enrollment> enrollments = enrollmentRepository.findEnrollmentsBySectionNoOrderByStudentName(assignment.getSection().getSectionNo());

        for (Enrollment e : enrollments){
            Grade grade = gradeRepository.findByEnrollmentIdAndAssignmentId(e.getEnrollmentId(), assignmentId);
            if (grade == null) {
                continue;
            }
            dto_list.add(new GradeDTO(grade.getGradeId(), e.getUser().getName(), e.getUser().getEmail(),
            grade.getAssignment().getTitle(), e.getSection().getCourse().getCourseId(), e.getSection().getSecId(),
                    grade.getScore()));
        }


        return dto_list;
    }

    // instructor uploads grades for assignment
    // user must be instructor for the section
    @PutMapping("/grades")
    public void updateGrades(@RequestBody List<GradeDTO> dlist) {


        // for each grade in the GradeDTO list, retrieve the grade entity
        // update the score and save the entity
        for (GradeDTO g : dlist){
            Grade grade = gradeRepository.findById(g.gradeId()).orElse(null);
            if (grade == null) {
                continue;
            }
            grade.setScore(g.score());
            gradeRepository.save(grade);
        }
    }



    // student lists their assignments/grades for an enrollment ordered by due date
    // student must be enrolled in the section
    @GetMapping("/assignments")
    public List<AssignmentStudentDTO> getStudentAssignments(
            @RequestParam("studentId") int studentId,
            @RequestParam("year") int year,
            @RequestParam("semester") String semester) {

        List<Assignment> assignments = assignmentRepository.findByStudentIdAndYearAndSemesterOrderByDueDate(studentId,
                year, semester);
        List<AssignmentStudentDTO> dto_list = new ArrayList<>();

        if (assignments.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "No assignments ");
        }

        for (Assignment a : assignments) {
            Enrollment enrollment = enrollmentRepository.findEnrollmentBySectionNoAndStudentId(a.getSection().getSectionNo(), studentId);
            // only getting sections student is enrolled in
            if (enrollment == null) {
                continue;
            }

            // getting grade and setting to null if it does not have a score
            Grade grade = gradeRepository.findByEnrollmentIdAndAssignmentId(enrollment.getEnrollmentId(), a.getAssignmentId());
            Integer score = (grade != null) ? grade.getScore() : null;

            dto_list.add(new AssignmentStudentDTO(a.getAssignmentId(), a.getTitle(), a.getDueDate(), a.getSection().getCourse().getCourseId(),
                    a.getSection().getSecId(), score));
        }


        return dto_list;
    }
}
